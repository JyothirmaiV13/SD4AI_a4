# -*- coding: utf-8 -*-
"""assignmnet4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E28MzhM_YQKfZGx3J-2Be_hUKkwSmXrZ
"""

import pandas as pd
import numpy as np

def getData(filename):
  canData=[] #List to store CAN data
  f = open(filename)
  #read_file = reader(f)
  read_file =f.readlines()

  #file = list(read_file)
  speed = []
  rpm = []
  i = 0
  for row in read_file:
    #Change the positions of the values if needed
    record = {'stamp':row[1:18], 'PID':row[25:28], 'const1':row[29:33],
'change':row[33:41],'value':int(row[41:45], 16), 'value2':0 ,'attack':0}

    if record["PID"] == '254': #Processing of speed
      if record["value"] >= 4095:
        record["attack"] = 1
      record['value'] =  (record['value'] * 0.62137119) /100
      speed.append(record['value'])

    if record["PID"] == '115': #Processing of RPM
      if record["value"] >= 65535:
        record["attack"] = 1
      record['value'] =  (record['value'] * 2)
      rpm.append(record['value'])

    i = i+1
    canData.append(record)
    record={}

  f.close()
  return canData

def dict_to_df(dict):

  #load dictionary to dataframe
  df = pd.DataFrame.from_dict(dict)
  df = df.drop(columns=['stamp','const1','change','value2'])
  df = df.loc[(df['PID'] == '115') | (df['PID'] == '254')]
  df = df.reset_index(drop=True)
  one_hot = pd.get_dummies(df['PID'])
  df = df.drop('PID',axis = 1)
  df = df.join(one_hot)
  df = df[['115', '254', 'value', 'attack']]
  df.rename(columns = {'115':'RPM', '254':'Speed'}, inplace = True)
  df.loc[df['RPM'] == 1, 'RPM'] = df['value']
  df.loc[df['Speed'] == 1, 'Speed'] = df['value']
  df = df.drop(columns=['value'])

  return df

#edit file name with file directory of downloaded log files

no_injection_df = dict_to_df(getData("sample_data/CAN bus log - no injection of messages.log"))
fff_injection_df = dict_to_df(getData("sample_data/CAN Bus log - injection of FFF as the speed reading.log"))
rpm_injection_df = dict_to_df(getData("sample_data/CAN Bus log - injection of RPM readings.log"))

fff_injection_df.Name = 'fff_injection_df'
no_injection_df.Name = 'no_injection_df'
rpm_injection_df.Name = 'rpm_injection_df'

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import joblib

# ... (getData, dict_to_df functions remain the same)

def split_data(dataset):
  columns=dataset.columns
  return dataset.drop(columns=['attack'],axis=1).values, dataset['attack'].values

def running(dataset):
  X_train, y_train = split_data(dataset)
  clf=RandomForestClassifier(random_state=42).fit(X_train,y_train)
  return clf

def joblibs(dataset):
  clf=running(dataset)
  joblib.dump(clf, f"random_forest_{dataset.Name}.joblib")

def process_multiple_datasets(datasets):
    # Iterate directly over the datasets list instead of using zip
    for dataset in datasets:
        joblibs(dataset)

# Example function calls
no_injection_df = dict_to_df(getData("sample_data/CAN bus log - no injection of messages.log"))
fff_injection_df = dict_to_df(getData("sample_data/CAN Bus log - injection of FFF as the speed reading.log"))
rpm_injection_df = dict_to_df(getData("sample_data/CAN Bus log - injection of RPM readings.log"))

fff_injection_df.Name = 'fff_injection_df'
no_injection_df.Name = 'no_injection_df'
rpm_injection_df.Name = 'rpm_injection_df'

datasets = [no_injection_df, fff_injection_df, rpm_injection_df]

process_multiple_datasets(datasets)